name: latest-build-nixos-arion
on:
  workflow_dispatch:
  # temporarily disable NixOS Arion
  # pull_request:
  #   paths:
  #     - .devcontainer/nixos-arion/**
  #     - .devcontainer/nixos/etc/**
  #   branches:
  #     - develop
  #     - main
  # push:
  #   tags:
  #     - v*
  #   paths:
  #     - .devcontainer/nixos-arion/**
  #     - .devcontainer/nixos/etc/**
  #   branches:
  #     - develop
  #     - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: cachix/install-nix-action@6a9a9e84a173d90b3ffb42c5ddaf9ea033fad011 # v23
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Set up nix store cache
        uses: actions/cache@v3
        with:
          path: /tmp/nix-closure
          key: nix-store-${{ hashFiles('.devcontainer/nixos-arion') }}
          restore-keys: |
            nix-store-${{ hashFiles('.devcontainer/nixos-arion') }}-
            nix-store-

      - name: Loads nix derivation cache
        id: load-cache
        run: |
          if [[ -f /tmp/nix-closure/nix-shell.closure ]]; then
            nix-store --import --option require-sigs false < /tmp/nix-closure/nix-shell.closure
            echo "use-cache=true" >> $GITHUB_OUTPUT
          fi

      - run: |
          nix-env -f '<nixpkgs>' -iA pkgs.direnv pkgs.nix-direnv
          nix-build
          nix-shell --run "direnv allow . && direnv allow .devcontainer/nixos-arion"

      - name: Build image using arion
        shell: direnv exec . bash -eo pipefail {0}
        working-directory: .devcontainer/nixos-arion
        run: |
           nix-build arion-build.nix
           make a-build config retag-image

      - name: Store nix derivation cache
        working-directory: .devcontainer/nixos-arion
        run: |
          DERIVATION=$(readlink result)
          echo $DERIVATION
          mkdir -p /tmp/nix-closure
          nix-store --export $(nix-store -qR ${DERIVATION}) > /tmp/nix-closure/nix-shell.closure

      - name: Run arion services
        shell: direnv exec . bash -eo pipefail {0}
        working-directory: .devcontainer/nixos-arion
        run: |
           docker-compose up -d
           sleep 10
           docker-compose exec -T devcontainer uname -a

      - name: Run Coverage test
        working-directory: .devcontainer/nixos-arion
        run: |
          cat << EOF | docker-compose exec -T devcontainer bash
          node --version
          nix-env --version
          nix --version
          nix-channel --list
          EOF

  docker-builder:
    # Only push if PR happens in the same repo
    if: github.event.pull_request.base.repo.url == github.event.pull_request.head.repo.url
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io

          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PASSWORD }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/lucernae/devcontainer-nix
          flavor: |
            latest=false
            prefix=nixos-arion---
          tags: |
            type=raw,value=stable,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=nixos-arion,prefix=,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}.{{minor}}.{{patch}}

      - uses: cachix/install-nix-action@6a9a9e84a173d90b3ffb42c5ddaf9ea033fad011 # v23
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Set up nix store cache
        uses: actions/cache@v3
        with:
          path: /tmp/nix-closure
          key: nix-store-${{ hashFiles('.devcontainer/nixos-arion') }}
          restore-keys: |
            nix-store-${{ hashFiles('.devcontainer/nixos-arion') }}-
            nix-store-

      - name: Loads nix derivation cache
        id: load-cache
        run: |
          if [[ -f /tmp/nix-closure/nix-shell.closure ]]; then
            nix-store --import --option require-sigs false < /tmp/nix-closure/nix-shell.closure
            echo "use-cache=true" >> $GITHUB_OUTPUT
          fi

      - run: |
          nix-env -f '<nixpkgs>' -iA pkgs.direnv pkgs.nix-direnv
          nix-build
          nix-shell --run "direnv allow . && direnv allow .devcontainer/nixos-arion"

      - name: Build and push image using arion
        shell: direnv exec . bash -eo pipefail {0}
        working-directory: .devcontainer/nixos-arion
        run: |
           make a-build config retag-image
           bash gh-action-retag-image-and-push.sh "${{ steps.docker_meta.outputs.tags }}"
